"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""
import os
from datetime import datetime, time
from typing import Optional

try:
    from zoneinfo import ZoneInfo
    HAS_ZONEINFO = True
except ImportError:
    # Fallback –¥–ª—è Python < 3.9
    try:
        from backports.zoneinfo import ZoneInfo
        HAS_ZONEINFO = True
    except ImportError:
        HAS_ZONEINFO = False


class TimezoneHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–æ–Ω–∞–º–∏"""
    
    MSK_TIMEZONE = "Europe/Moscow"
    DEFAULT_WORK_START = time(7, 0)   # 07:00
    DEFAULT_WORK_END = time(20, 0)     # 20:00
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        self.test_mode = os.getenv('TEST_MODE', '0') == '1'
        self.disable_time_check = os.getenv('DISABLE_TIME_CHECK', '0') == '1'
        
    def get_moscow_time(self) -> datetime:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
        
        Returns:
            datetime: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–°–ö
        """
        if HAS_ZONEINFO:
            return datetime.now(ZoneInfo(self.MSK_TIMEZONE))
        else:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC+3 (–ú–°–ö)
            from datetime import timezone, timedelta
            msk_offset = timezone(timedelta(hours=3))
            return datetime.now(msk_offset)
    
    def is_working_hours(
        self, 
        start_time: Optional[time] = None,
        end_time: Optional[time] = None
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö
        
        Args:
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 07:00)
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20:00)
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        """
        # –ï—Å–ª–∏ TEST_MODE –∏–ª–∏ DISABLE_TIME_CHECK, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        if self.test_mode or self.disable_time_check:
            return True
        
        start_time = start_time or self.DEFAULT_WORK_START
        end_time = end_time or self.DEFAULT_WORK_END
        
        now_msk = self.get_moscow_time()
        current_time = now_msk.time()
        
        return start_time <= current_time <= end_time
    
    def get_time_status(
        self,
        start_time: Optional[time] = None,
        end_time: Optional[time] = None
    ) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤—Ä–µ–º–µ–Ω–∏
        """
        start_time = start_time or self.DEFAULT_WORK_START
        end_time = end_time or self.DEFAULT_WORK_END
        
        now_msk = self.get_moscow_time()
        is_working = self.is_working_hours(start_time, end_time)
        
        return {
            'current_time_msk': now_msk,
            'current_time_str': now_msk.strftime('%H:%M:%S'),
            'is_working_hours': is_working,
            'work_start': start_time.strftime('%H:%M'),
            'work_end': end_time.strftime('%H:%M'),
            'test_mode': self.test_mode,
            'time_check_disabled': self.disable_time_check,
            'timezone': self.MSK_TIMEZONE,
            'has_zoneinfo': HAS_ZONEINFO
        }
    
    def format_work_hours(
        self,
        start_time: Optional[time] = None,
        end_time: Optional[time] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
        
        Args:
            start_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            end_time: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
        """
        start_time = start_time or self.DEFAULT_WORK_START
        end_time = end_time or self.DEFAULT_WORK_END
        
        status = self.get_time_status(start_time, end_time)
        
        msg = f"üïê –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {status['work_start']}-{status['work_end']} –ú–°–ö\n"
        msg += f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {status['current_time_str']}\n"
        
        if status['test_mode']:
            msg += "‚ö†Ô∏è –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n"
        elif status['time_check_disabled']:
            msg += "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞\n"
        
        if status['is_working_hours']:
            msg += "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else:
            msg += "‚ùå –í–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"
        
        return msg

