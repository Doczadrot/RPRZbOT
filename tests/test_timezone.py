"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
"""
import os
import sys
from datetime import time, datetime
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from bot.utils.timezone_helper import TimezoneHelper

try:
    from zoneinfo import ZoneInfo
    HAS_ZONEINFO = True
except ImportError:
    HAS_ZONEINFO = False


def test_get_moscow_time():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
    
    helper = TimezoneHelper()
    msk_time = helper.get_moscow_time()
    
    assert isinstance(msk_time, datetime), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å datetime"
    print(f"‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {msk_time}")


def test_is_working_hours_in_range():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ - –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    print("üß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (–≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)...")
    
    helper = TimezoneHelper()
    
    # –ú–æ–∫–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞ 12:00 (—Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–Ω—è)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(12, 0)
        mock_time.return_value = mock_dt
        
        # –ë–µ–∑ TEST_MODE
        helper.test_mode = False
        helper.disable_time_check = False
        
        result = helper.is_working_hours(
            start_time=time(7, 0),
            end_time=time(20, 0)
        )
        
        assert result is True, "12:00 –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 07:00-20:00"
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_is_working_hours_out_of_range():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ - –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    print("üß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)...")
    
    helper = TimezoneHelper()
    
    # –ú–æ–∫–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞ 22:00 (–ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(22, 0)
        mock_time.return_value = mock_dt
        
        # –ë–µ–∑ TEST_MODE
        helper.test_mode = False
        helper.disable_time_check = False
        
        result = helper.is_working_hours(
            start_time=time(7, 0),
            end_time=time(20, 0)
        )
        
        assert result is False, "22:00 –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 07:00-20:00"
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_test_mode_overrides():
    """–¢–µ—Å—Ç —á—Ç–æ TEST_MODE –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç: TEST_MODE –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TEST_MODE
    os.environ['TEST_MODE'] = '1'
    helper = TimezoneHelper()
    
    # –ú–æ–∫–∞–µ–º –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (02:00)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(2, 0)
        mock_time.return_value = mock_dt
        
        result = helper.is_working_hours(
            start_time=time(7, 0),
            end_time=time(20, 0)
        )
        
        assert result is True, "TEST_MODE –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏"
    
    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    del os.environ['TEST_MODE']
    
    print("‚úÖ TEST_MODE –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É")


def test_disable_time_check():
    """–¢–µ—Å—Ç —á—Ç–æ DISABLE_TIME_CHECK –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç: DISABLE_TIME_CHECK –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DISABLE_TIME_CHECK
    os.environ['DISABLE_TIME_CHECK'] = '1'
    helper = TimezoneHelper()
    
    # –ú–æ–∫–∞–µ–º –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ (03:00)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(3, 0)
        mock_time.return_value = mock_dt
        
        result = helper.is_working_hours(
            start_time=time(7, 0),
            end_time=time(20, 0)
        )
        
        assert result is True, "DISABLE_TIME_CHECK –¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏"
    
    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    del os.environ['DISABLE_TIME_CHECK']
    
    print("‚úÖ DISABLE_TIME_CHECK –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É")


def test_get_time_status():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏...")
    
    helper = TimezoneHelper()
    
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(14, 30)
        mock_dt.strftime.return_value = "14:30:00"
        mock_time.return_value = mock_dt
        
        helper.test_mode = False
        helper.disable_time_check = False
        
        status = helper.get_time_status(
            start_time=time(7, 0),
            end_time=time(20, 0)
        )
        
        assert status['current_time_str'] == "14:30:00"
        assert status['is_working_hours'] is True
        assert status['work_start'] == "07:00"
        assert status['work_end'] == "20:00"
        assert status['timezone'] == "Europe/Moscow"
        assert status['test_mode'] is False
        assert status['time_check_disabled'] is False
    
    print("‚úÖ –°—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")


def test_format_work_hours():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤"""
    print("üß™ –¢–µ—Å—Ç: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤...")
    
    helper = TimezoneHelper()
    
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(10, 0)
        mock_dt.strftime.return_value = "10:00:00"
        mock_time.return_value = mock_dt
        
        helper.test_mode = False
        helper.disable_time_check = False
        
        formatted = helper.format_work_hours(
            start_time=time(7, 0),
            end_time=time(20, 0)
        )
        
        assert "07:00-20:00" in formatted
        assert "10:00:00" in formatted
        assert "–ú–°–ö" in formatted
        assert "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç" in formatted
    
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("üß™ –¢–µ—Å—Ç: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏...")
    
    helper = TimezoneHelper()
    helper.test_mode = False
    helper.disable_time_check = False
    
    # –¢–µ—Å—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (07:00)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(7, 0)
        mock_time.return_value = mock_dt
        
        assert helper.is_working_hours(time(7, 0), time(20, 0)) is True
    
    # –¢–µ—Å—Ç –Ω–∞ –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (20:00)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(20, 0)
        mock_time.return_value = mock_dt
        
        assert helper.is_working_hours(time(7, 0), time(20, 0)) is True
    
    # –¢–µ—Å—Ç –Ω–∞ –º–∏–Ω—É—Ç—É –¥–æ –Ω–∞—á–∞–ª–∞ (06:59)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(6, 59)
        mock_time.return_value = mock_dt
        
        assert helper.is_working_hours(time(7, 0), time(20, 0)) is False
    
    # –¢–µ—Å—Ç –Ω–∞ –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (20:01)
    with patch.object(helper, 'get_moscow_time') as mock_time:
        mock_dt = MagicMock()
        mock_dt.time.return_value = time(20, 1)
        mock_time.return_value = mock_dt
        
        assert helper.is_working_hours(time(7, 0), time(20, 0)) is False
    
    print("‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤...\n")
    
    try:
        test_get_moscow_time()
        test_is_working_hours_in_range()
        test_is_working_hours_out_of_range()
        test_test_mode_overrides()
        test_disable_time_check()
        test_get_time_status()
        test_format_work_hours()
        test_edge_cases()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except AssertionError as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return False
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)

